#include<stdio.h>
#include<string.h>
//模拟实现qsort,实现冒泡排序,不同类型的数据排序方法不同
void Swap(char* buf1, char* buf2, int width)//需要知道元素的字节，传width进去
{
	int i = 0;
	for (i = 0; i < width; i++)
	{
		char tmp = *buf1;
		*buf1 = *buf2;
		*buf2 = tmp;
		buf1++;
		buf2++;
	}
}              //void*  可以接收任意类型的指针/指针，不能 * + -
void bubble_sort(void* base, int sz, int width, int(*cmp)(void* e1, void* e2))//我们在比较的时候也不知道数据是什么类型，所以设置void* e1,2
{                                  //width 知道数据的内存布局
	int i = 0;//趟数
	for (i = 0; i < sz - 1; i++)//每一趟两两比较的对数
	{
		int j = 0;
		for (j = 0; j < sz - 1; j++)
		{    //两个元素比较，类型不一样，比较方法不一样
			if (cmp((char*)base + j * width, (char*)base + (j + 1) * width) > 0)//把相邻两个元素的地址传进去
			{//base作为void*时不能直接加减，转换成char*,能一个字节一个字节的加减，跳过j个宽度的元素
				//交换
				Swap((char*)base + j * width, (char*)base + (j + 1) * width, width);
			}
		}
	}
}
int cmp_int(const void* e1, const void* e2)
{
	return *(int*)e1 - *(int*)e2;
}
int cmp_float(const void* e1, const void* e2)
{
	/*if (*(float*)e1 == *(float*)e2)
		return 0;
	else if (*(float*)e1 > *(float*)e2)
		return 1;
	else
		return -1;*/
	return((int)(*(float*)e1 - *(float*)e2));
}
struct Stu//必须写在cmp_struct前面，否则运行失败
{
	char name[20];
	int age;
};
int cmp_struct_age(const void* e1, const void* e2)
{   //用age排序,箭头比（强制转换）优先级高，所以先强制转换再带个（）
	return ((struct Stu*)e1)->age - ((struct Stu*)e2)->age;
}
int cmp_str_name(const void* e1, const void* e2)
{   //比较name就是比较字符串，不能用==,<,>,应该用strcmp
	return strcmp(((struct Stu*)e1)->name, ((struct Stu*)e2)->name);
}
void test1()
{
	int arr[10] = { 9,8,7,6,4,5,3,1,2,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz, sizeof(arr[0]), cmp_int);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
}
void test2()
{
	float f[] = { 9.0,8.0,7.0,5.0,6.0 };
	int sz = sizeof(f) / sizeof(f[0]);
	bubble_sort(f, sz, sizeof(f[0]), cmp_float);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%f ", f[i]);
	}
	printf("\n");
}
void test3()
{
	struct Stu s[2] = { {"zhangsan",40},{"lisi",30} };
	int sz = sizeof(s) / sizeof(s[0]);
	bubble_sort(s, sz, sizeof(s[0]), cmp_struct_age);
	for (int i = 0; i < 2; i++)
	{
		printf("age: %d\n", s[i].age);
	}
	printf("\n");
}
void test4()
{
	struct Stu s[2] = { {"zhangsan",40},{"lisi",30} };
	int sz = sizeof(s) / sizeof(s[0]);
	bubble_sort(s, sz, sizeof(s[0]), cmp_str_name);
	for (int i = 0; i < 2; i++)
	{
		printf("name: %s\n", s[i].name);
	}
}
int main()
{
	test1();
	test2();
	test3();
	test4();
	return 0;
}
