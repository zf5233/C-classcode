#include<stdio.h>
#include<stdlib.h>
#include<string.h>
//模拟实现qsort,实现冒泡排序
//不同类型的数据排序方法不同

//e1,e2,接收要比较的2个元素的地址
int cmp_int(const void* e1, const void* e2)//比较元素的大小
{
	//比较2个整型
	return *(int*)e1 - *(int*)e2;
}
int cmp_float(const void* e1, const void* e2)
{
	//比较浮点型
	/*if (*(float*)e1 == *(float*)e2)
		return 0;
	else if (*(float*)e1 > *(float*)e2)
	    return 1;
	else
		return -1;*/
	return((int)(*(float*)e1 - *(float*)e2));
}
struct Stu//必须写在cmp_struct前面，否则运行失败
{
	char name[20];
	int age;
};
int cmp_struct(const void* e1, const void* e2)
{
	//用age排序
	return ((struct Stu*)e1)->age - ((struct Stu*)e2)->age;
}
int cmp_str_name(const void* e1, const void* e2)
{
	//比较name就是比较字符串，不能用==,<,>,应该用strcmp
	return strcmp(((struct Stu*)e1)->name, ((struct Stu*)e2)->name);
}
void test1()
{
	int arr[10] = { 9,8,7,6,4,5,3,1,2,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), cmp_int);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
}
void test2()
{
	float f[] = { 9.0,8.0,7.0,5.0,6.0,5.5 };
	int sz = sizeof(f) / sizeof(f[0]);
	qsort(f, sz, sizeof(f[0]), cmp_float);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%f ", f[i]);
	}
}
void test3()
{
	struct Stu s[2] = { {"zhangsan",40},{"lisi",30} };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), cmp_str_name);
}
int main()
{
	test1();
	test2();
	test3();
	return 0;
}
